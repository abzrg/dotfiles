#!/bin/sh

# --- SENSIBLE DEFAULTS + VERBOSITY
alias \
    cp="cp -iv"                         \
    mv="mv -iv"                         \
    rm="rm -vI"                         \
    ln="ln -v"                          \
    mkd="mkdir -pv"                     \
    duh="du -h -d 0 [^.]*"              \
    yt="youtube-dl --add-metadata -ci"  \
    yta="yt -x -f bestaudio/best"       \
    ytb="yt -f bestvideo+bestaudio"     \
    yts="youtube-dl --all-subs --skip-download" \
    ytpl="yt -o '%(playlist_index)s-%(title)s.%(ext)s'" \
    ytbpl="yt -f bestvideo+bestaudio -o '%(playlist_index)s-%(title)s.%(ext)s'"
    # ffmpeg="ffmpeg -hide_banner"      \

# --- COLORIZE COMMANDS

# alias \
#     ls="ls -hNFG --color=auto --group-directories-first"    \
#     l='ls'                                                  \
#     la='ls -a'                                              \
#     ll="ls -ali"                                            \

# exa: a modern replacement for ‘ls’.
alias \
    l='lsd -hFA --group-dirs first' \
    ls='exa --icons --group-directories-first' \
    la='ls -a' \
    ll='ls -l --git' \
    sl='ls'

alias \
    grep="grep --color=auto"                                \
    egrep="egrep --color=auto"                              \
    fgrep="fgrep --color=auto"                              \
    diff="diff --color=auto"

# --- LONG COMMANDS
alias \
    df='df -h'                          \
    dud='du -h -d 1'                    \
    a="sudo apt"                        \
    e="$EDITOR"                         \
    em="neomutt"                        \
    f="$FILE"                           \
    fp='fontpreview'                    \
    g="git"                             \
    o='xdg-open'                        \
    open='xdg-open'                     \
    vi="/bin/vim"                       \
    p="zathura"                         \
    ka="killall"                        \
    grp="grep -Rli"                     \
    SS="sudo systemctl"                 \
    duh="du -h -d 0 [^.]*"              \
    free='free -m'                      \
    chbin='chmod 755'                   \
    chreg='chmod 644'                   \
    sdn="sudo shutdown -h now"          \
    trem="transmission-remote"          \
    merge='xrdb -merge ~/.Xresources'   \
    slc="make clean && rm -f config.h"  \
    myip="curl http://myip.dnsomatic.com && echo ''" \
    visudo='sudo EDITOR=nvim visudo -f /etc/sudoers.d/ali' \
    conda_a='source ~/bin/anaconda3/bin/activate' \
    conda_d='conda deactivate' \
    scrsize="xrandr | grep ' connected ' | cut -d' ' -f4 | cut -d'+' -f1" \
    rcp="rsync --archive --human-readable --progress --verbose --whole-file" \
    scp="rsync --archive --checksum --compress --human-readable --itemize-changes --rsh=ssh --stats --verbose" \
    c='/usr/bin/git --git-dir=$HOME/repos/dotfiles/ --work-tree=$HOME' \
    syms="find . -maxdepth 1 -type l -print | while read line; do ls -alc "\$line"; done" \
    alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"' \

# --- DIRECTORIES
alias \
    cd..='cd ..'                                    \
    m="cd ${XDG_MUSIC_DIR:-$HOME/Music}"            \
    cf="cd ${XDG_CONFIG_HOME:-$HOME/.config}"       \
    dl="cd ${XDG_DOWNLOAD_DIR:-$HOME/Downloads}"    \
    dt="cd ${XDG_DATA_HOME:-$HOME/.local/share}"    \
    sc="cd $HOME/.local/bin"                        \
    scr="cd $HOME/.local/scripts"                   \
    doc="cd ${XDG_DOCUMENTS_DIR:-$HOME/Documents}"  \
    pic="cd ${XDG_PICTURES_DIR:-$HOME/Pictures}"    \
    vid="cd ${XDG_VIDEOS_DIR:-$HOME/Videos}"        \

# --- FILES
alias \
    inp="$EDITOR $HOME/.config/inputrc"         \
    xre="$EDITOR $HOME/.Xresources"             \
    xin="$EDITOR $HOME/.xinitrc"                \
    cfb="$EDITOR $HOME/.bashrc"                 \
    cfz="$EDITOR $HOME/.config/zsh/.zshrc"      \
    cfzp="$EDITOR $HOME/.zprofile"              \
    cfp="$EDITOR $HOME/.profile"                \
    cft="$EDITOR $HOME/.tmux.conf"              \
    cfs="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/sxhkd/sxhkdrc"       \
    cfa="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/aliasrc"             \
    cfP="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/picom.conf"          \
    cfl="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/lf/lfrc"             \
    cfm="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/mutt/muttrc"         \
    cfmb="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/ncmpcpp/bindings"   \
    cfmc="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/ncmpcpp/config"     \
    cfn="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/newsboat/config"     \
    cfu="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/newsboat/urls"       \
    cfx="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/sxiv/exec/key-handler" \
    cfA="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/alacritty/alacritty.yml"

# vim and neovim config
alias cfi="$EDITOR ${XDG_CONFIG_HOME:-$HOME/.config}/nvim/init.lua"
alias cfv="/usr/bin/vim $HOME/.vimrc"

# ascii table
alias ascii='man ascii | grep -m 1 -A 63 --color=never Oct | less'

# special regex
alias reg_mac='echo ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
alias reg_git_hash='echo \b[0-9a-f]{5,40}\b'

# --- Pretty print the path
alias path='echo $PATH | tr -s ":" "\n"'

# --- Libreoffice
alias \
    writer="libreoffice --writer"   \
    calc="libreoffice --calc"       \
    impress="libreoffice --impress"

# --- Use nevim for vim if present.
command -v nvim >/dev/null && alias vimdiff="nvim -d"

# -----------------------------------------------------------------------------
# --- FUNCTIONS
# -----------------------------------------------------------------------------

# Nicely print key name and key syms
keys() {
    xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}

# Spell checker
spell() {
    echo $@ | hunspell -d en_US | grep '^&'
}

# Dictionary (sdcv)
d() {
    # Data in ~/.local/share/stardict/dic/
    sdcv -n --utf8-output --color "$@" 2>&1 | \
        fold --width=$(tput cols) | \
        less -FRX
}

# Commandline Google translate
tra() { trans -d -e aspell -bidi "$@" | less -R ;}
alias enfa='tra en:fa' \
    faen='tra fa:en' \
    ende='tra en:de' \
    enfr='tra en:fr' \
    jaen='tra ja:en' \
    enja='tra en:ja'

# Pronounce a word (uses translate program)
prnc() {
    mpv --no-config ~/Documents/test/gb/"$@".mp3 1>/dev/null 2>&1 || \
        trans -speak "$@" &>/dev/null
}

odef() {
    # dict network protocol
    curl -s dict://dict.org/d:"$@" | less -F -X -R
}

# Extract everything
ex() {
    # -- ARCHIVE EXTRACTION
    # usage: ex <file>
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1   ;;
            *.tar.gz)    tar xzf $1   ;;
            *.bz2)       bunzip2 $1   ;;
            *.rar)       unrar x $1   ;;
            *.gz)        gunzip $1    ;;
            *.tar)       tar xf $1    ;;
            *.tbz2)      tar xjf $1   ;;
            *.tgz)       tar xzf $1   ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1;;
            *.7z)        7z x $1      ;;
            *.deb)       ar x $1      ;;
            *.tar.xz)    tar xf $1    ;;
            *.tar.zst)   unzstd $1    ;;
            *)           echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Download documents!
shdl() { curl -O $(curl -s https://sci-hub.se/"$@" | grep location.href | grep -o http.*pdf) ;}
# shdl() { curl -O $(curl -s https://sci-hub.st/"$@" | grep location.href | grep -o https.*pdf) ;}
# shdl() { curl -O $(curl -s https://sci-hub.scihubtw.st/"$@" | grep location.href | grep -o https.*pdf) ;}

# Search through the scripts
se() {
    du -a ~/.local/{bin,scripts}/* | awk '{print $2}' | fzf --layout=reverse | xargs -r $EDITOR
}

# b - browse chrome bookmarks (dependency: jq)
bk() {
     bookmarks_path=~/.config/BraveSoftware/Brave-Browser/Default/Bookmarks

     jq_script='
        def ancestors: while(. | length >= 2; del(.[-1,-2]));
        . as $in | paths(.url?) as $key | $in | getpath($key) | {name,url, path: [$key[0:-2] | ancestors as $a | $in | getpath($a) | .name?] | reverse | join("/") } | .path + "/" + .name + "\t" + .url'

    jq -r "$jq_script" < "$bookmarks_path" \
        | sed -E $'s/(.*)\t(.*)/\\1\t\x1b[36m\\2\x1b[m/g' \
        | fzf --layout=reverse --ansi \
        | cut -d$'\t' -f2 \
        | xargs xdg-open
}

# PACMAN-related Utilities
install_with_fzf() {
    pacman -Slq | fzf --layout=reverse --multi --preview 'pacman -Si {1}' | \
        xargs -ro sudo pacman -S
}
remove_with_fzf() {
    pacman -Qq | fzf --multi --preview 'pacman -Qi {1}' | \
        xargs -ro sudo pacman -Rns
}
pacman-purge() {
   sudo paccache -r
   sudo pacman -Rsn $(pacman -Qqdt)
}
pacsize() {
   sudo pacman -Qi | \
      awk 'BEGIN{sort="sort -k2 -n"} /Name/ {name=$3} /Size/ {size=$4/1024;print name":",size,"Mb"|sort}' | \
      less
}

# Create files containing list of all files and folders under the ~
# These files are created for faster access in following functions
update_fzf() {
    # Update fzf files & directories
    find $HOME -type f 2>/dev/null | \
        egrep -v ".cache|.git|.svn" \
        > ~/.cache/files

    find $HOME -type d 2>/dev/null | \
        egrep -v ".cache|.git|.svn" \
        > ~/.cache/directories
}
open_with_fzf() {
    cat ~/.cache/files | fzf | xargs -ro -d "\n" xdg-open 2>&-
}
open_dotfiles_with_fzf() {
    c ls-tree -r master --name-only ~ | grep -v 'share/wikidates' | fzf --layout=reverse -m \
        --preview="\
        /usr/bin/git \
             --git-dir=$HOME/repos/dotfiles/ \
             --work-tree=$HOME status -s {} | grep . && echo;
        echo -e '\t → {} ←\n'; bat --color=always --style=plain {}" | \
        xargs -ro -d "\n" -I {} $EDITOR -p {}
}
text_file_with_fzf() {
    cat ~/.cache/files  | fzf -m --height 100% --preview="less {}" | \
        xargs -ro -d "\n" $EDITOR -p  2>&-
}
text_file_cur_dir_with_fzf() {
    fd -t f -H -I  | fzf --layout=reverse -m --no-height --preview="less {}" | \
        xargs -ro -d "\n" $EDITOR -p  2>&-
}
cd_with_fzf() {
    # cd $HOME && cd "$(fd -H -t d . $HOME | fzf --layout=reverse --preview="tree -C -L 1 {}" --bind="ctrl-space:toggle-preview" --preview-window=:hidden)"
    cd "$(\
        cat ~/.cache/directories | \
        fzf --preview="tree -C -L 1 {}" \
        --layout=reverse \
        --bind="ctrl-x:toggle-preview" --preview-window=:right \
        )"
}

# Artixlinux
enable() { [ -z "$1" ] && exit; sudo ln -s /etc/runit/sv/$1 /run/runit/service ;}
disable() { [ -z "$1" ] && exit; sudo rm /run/runit/service/$1 ;}
restart() { [ -z "$1" ] && exit; sudo sv restart $1 ;}

# A function to show git statistics
gstat() {
    cat ~/.cache/zsh/history | awk '/^git/ { print $1, $2 }' | \
        sort | uniq -dc | sort | \
        gnuplot -p -e 'set terminal x11; set xtics rotate 180; set key off;
            plot [:][:] "< cat -" using 1: xtic(3) with histogram' | \
        feh - >/dev/null 2>&1
}

# Replace openfoam headers
repheader() {
sed -i s/'\/\*-*\*\\'/'*--------------------------------*- C++ -*----------------------------------*\'/g "$1"

}

# List processes and thier id of a given pattern
lsid() {
    pgrep -af "$1" | while read -r pid cmd; do echo "$pid => $cmd"; done
}

v() {
    if [ "$(pwd)" == '/home/ali/OpenFOAM/ali-7/run/cdi' ]; then
        /usr/bin/vim $@
    else
        /usr/bin/nvim $@
    fi
}

# go to the root of the project seamlessly
cdp() {
    TEMP_PWD=`pwd`
    while ! [-d .git ]; do
        cd ..
    done
    OLDPWD=$TEMP_PWD
}
