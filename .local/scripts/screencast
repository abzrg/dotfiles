#!/bin/sh

# If there is any process using camera kill it
pkill -f /dev/video0

# Use 'xrandr' to find your default resolution
SCREEN_SIZE="1366x768"

# You can find the audio devices with the command:
# pactl list short sources
AUDIO_DEVICE="alsa_input.pci-0000_00_1b.0.analog-stereo" #/dev/dsp8

# Variables to create the output file name
DATE=$(date +"%F")
TIME=$(date +"%T")
NAME="$TIME"
PROJECT=screencasts/"$DATE"
EXT="mkv"

# Display usage information
usage ()
{
    echo "Usage :  $0 [-n] NAME [-p] PROJECT [-x] TYPE [--]

    Options:
    -h        Display this message
    -n        Name of the output file (defualt=time of start of record)
    -p        Name of the project
    -x        Format of output (default=mkv)"
}    # --- end of function usage ---

# Handle command line arguments
while getopts "h:n:p:x:" opt
do
    case $opt in
        h) usage; exit 0
            ;;
        n) NAME="$OPTARG"
            ;;
        p) PROJECT="$OPTARG"
            ;;
        x) EXT="$OPTARG"
            ;;
        ?) echo; echo "Option does not exist : OPTARG"; echo
            usage; exit 1
            ;;
    esac    # --- end of case ---
done
shift "$((OPTIND-1))"

FILE=$HOME/Videos/"$PROJECT"/"$NAME"."$EXT"

# If file exist already stop
if [ -f "$FILE" ]
then
    echo "$FILE exits!"; exit
else
    mkdir -p "$HOME"/Videos/"$PROJECT"
fi

ffmpeg -video_size "$SCREEN_SIZE" \
    -framerate 50 \
    -thread_queue_size 512 -f x11grab -i :0.0+0,0 \
    -thread_queue_size 512 -f pulse -i "$AUDIO_DEVICE" \
    -vcodec libx264rgb -crf 0 -preset:v ultrafast \
    -acodec pcm_s16le \
    -af aresample=async=1:first_pts=0 \
    -y \
    "$FILE"


                                   #'*'*'*'*'#
                                  #'* NOTES *'#
                                   #'*'*'*'*'#

# 1. ffmpeg ------------------------------------------------------------------

# The 'thread_queue_size' parameters ensure enough buffer space for the raw
# input streams, and avoids packets being discarded, the default is 8, 512 is
# probably too high but it works.

# The 'aresample' filter ensures audio and video are synced. It actually means
# streach and squeeze the audio to match the timestamps of the video,
# 'first_pts' means that the first audio position starts at 0.

# 2. shell -------------------------------------------------------------------

# getopts ignores all arguments not beginning with -, and -- tells getopts to
# stop processing any subsequent args as options
# (e.g. rm -f -- -filenamebeginningwith-.txt).
# ref: https://unix.stackexchange.com/a/236017

# The reason for the command shift $((OPTIND -1)) is to "skip" the options that
# have been parsed by getopts and to leave the file type arguments available
# for further processing.
# Note that $OPTIND is a shell variable managed by the getopts builtin command
# of the shell. When the shell starts, $OPTIND equals 1 and is incremented
# every time a getopts call discoveres options or option arguments.
# shiftremoves an arbitrary amount of arguments from the beginning of the
# current list of arguments.
# Calling shift 3 will irrecoverable remove the 3 first arguments from the list
# of arguments from the shell.
# ref: https://unix.stackexchange.com/a/236042

# A demonstration may illuminate:
# ```
# $ set -- 1 2 3 4 5 6  # set the positional parameter $1, $2, ...
# $ echo "$@"   # print the positional params
# 1 2 3 4 5 6
# $ shift 3
# $ echo "$@"
# 4 5 6
# ```
# Now, `[ $1 -eq 4 ] && [ $2 -eq 5 ] && [ $3 -eq 6 ]`
# ref: https://unix.stackexchange.com/a/236077

# 'shift n' removes 'n' strings from the positional parameters list.
# Thus 'shift $((OPTIND-1))' removes all the options that have been parsed by
# 'getopts' from the parameters list, and so after that point, '$1' will refer
# to the first non-option argument passed to the script.
# ref: https://unix.stackexchange.com/a/214151
